"""
This module handle the access to the logs store
"""
import logging
import os
from typing import Optional

from api.services.storage.path_builder import PathBuilder
from api.services.storage.enums.working_dir import WorkingDir


logger = logging.getLogger("gateway")


class LogsStorage:
    """
    The main objective of this class is to manage the access to logs generated by a Job.

    Attributes:
        username (str): storage user's username
        working_dir (WorkingDir(Enum)): working directory
        function_title (str): title of the function in case is needed to build the path
        provider_name (str | None): name of the provider in caseis needed to build the path
    """

    FILE_EXTENSION = ".log"
    PATH = "logs"
    ENCODING = "utf-8"

    def __init__(
        self,
        username: str,
        working_dir: WorkingDir,
        function_title: str,
        provider_name: Optional[str],
    ) -> None:
        self.sub_path = PathBuilder.get_sub_path(
            working_dir=working_dir,
            username=username,
            function_title=function_title,
            provider_name=provider_name,
            extra_sub_path=self.PATH,
        )
        self.absolute_path = PathBuilder.get_absolute_path(
            working_dir=working_dir,
            username=username,
            function_title=function_title,
            provider_name=provider_name,
            extra_sub_path=self.PATH,
        )

    def _get_log_path(self, job_id: str) -> str:
        """
        Return the path to a log file from the id of a Job

        Args:
            job_id (str): the id for the job to get the log file

        Returns:
            Optional[str]: path to the log file
        """
        return os.path.join(self.absolute_path, f"{job_id}{self.FILE_EXTENSION}")

    def get(self, job_id: str) -> Optional[str]:
        """
        Retrieve a log file for the given job id

        Args:
            job_id (str): the id for the job to get the logs

        Returns:
            Optional[str]: content of the file
        """
        log_path = self._get_log_path(job_id)
        if not os.path.exists(log_path):
            logger.info(
                "Log file for job ID '%s' not found in directory '%s'.",
                job_id,
                log_path,
            )
            return None

        try:
            with open(log_path, "r", encoding=self.ENCODING) as log_file:
                return log_file.read()
        except (UnicodeDecodeError, IOError) as e:
            logger.error(
                "Failed to read log file for job ID '%s': %s",
                job_id,
                str(e),
            )
            return None
