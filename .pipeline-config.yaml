# SPS configuration

version: '1'

# -- the following run on PRs *and* CI

# Set up build and test environment
setup:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.40
  script: |
    scripts/${STAGE}.sh

# Run detect secrets scan on the application code
detect-secrets:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.40
  script: |
    scripts/${STAGE}.sh

# Run static scan code on the application code.
compliance-checks:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.40
  dind: true
  abort_on_failure: false
  script: |
    #!/bin/sh
    echo "cat run.sh"
    cat /opt/commons/compliance-checks/run.sh
    echo "end of run.sh"
    /opt/commons/compliance-checks/run.sh

# finish:
#   image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.40
#   abort_on_failure: false
#   script: |
#     scripts/${STAGE}.sh

# -- The following runs for pull request only

# Run unit tests and application tests on application code.
unit-tests:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.40
  abort_on_failure: false
  script: |
    scripts/${STAGE}.sh

# -- The following run for CI only

# Run unit tests and application tests on application code.
test:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.40
  abort_on_failure: false
  script: |
    scripts/${STAGE}.sh

# Run static scan code on the application code.
# static-scan:
#   image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.40
#   abort_on_failure: false
#   script: |
#     scripts/${STAGE}.sh

# Build the artifacts
containerize:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.40
  dind: true
  abort_on_failure: false
  script: |
    #!/usr/bin/env bash
    
    scripts/${STAGE}.sh
    source scripts/build_setup.sh
    source scripts/build.sh

# Sign the built artifacts
# sign-artifact:
#   image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.40
#   abort_on_failure: false
#   script: |
#     scripts/${STAGE}.sh

# Deploy the built artifacts to the dev environment
deploy:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.40
  abort_on_failure: false
  script: |
    scripts/${STAGE}.sh

# Run dynamic scan on the application
# dynamic-scan:
#   image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.40
#   abort_on_failure: false
#   script: |
#     scripts/${STAGE}.sh

acceptance-test:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.40
  abort_on_failure: false
  script: |
    scripts/${STAGE}.sh

# scan-artifact:
#   image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.40
#   abort_on_failure: false
#   script: |
#     scripts/${STAGE}.sh

release:
  image: icr.io/continuous-delivery/pipeline/pipeline-base-ubi:3.40
  abort_on_failure: false
  script: |
    scripts/${STAGE}.sh
