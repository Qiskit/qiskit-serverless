# ===================
# Quantum Serverless configs
# ===================
platform: default

# ===================
# Ingress Nginx controller configs
# ===================

# Ingress Nginx controller is disabled by default to not affect cloud providers' controller configuration
nginxIngressControllerEnable: true
nginx-ingress-controller:
  nameOverride: "nginx-ingress-controller"
  fullnameOverride: "nginx-ingress-controller"
ingress:
  annotations:
    # For IBM Cloud the valid ingress class values are: public-iks-k8s-nginx and private-iks-k8s-nginx
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/proxy-buffers-number: "4"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "512k"
  tls: []
#  tls:
#    - hosts:
#      - "quantum-serverless-url.cloud"
#      secretName: "tls-secret-name"
  hosts: []
#  hosts:
#    - host: "quantum-serverless-url.cloud"

# ===================
# Gateway configs
# ===================

gatewayEnable: true
gateway:
  nameOverride: "gateway"
  fullnameOverride: "gateway"
  useCertManager: false

  image:
    repository: "icr.io/quantum-public/quantum-serverless-gateway"
    pullPolicy: IfNotPresent
    tag: "0.2.1"
  application:
    siteHost: "http://gateway:8000"
    rayHost: "http://kuberay-head-svc:8265"
    auth:
      keycloak:
        clientId: "gateway-client"
        url: "http://keycloak:31059"
        realm: "quantumserverless"
        clientSecret: GATEWAYSECRET-CHANGEME
    superuser:
      username: "admin"
      password: "passw0rd"
      email: "admin@examplemail.io"
    service:
      type: ClusterIP
      port: 8000
    ray:
      nodeImage: "icr.io/quantum-public/quantum-serverless-ray-node:0.2.1-py39"
      opensslImage: registry.access.redhat.com/ubi8/openssl:8.8-3
      kubectlImage: alpine/k8s:1.27.3
    limits:
      maxJobsPerUser: 2
      maxComputeResources: 4
  database:
    name: gateway_db

# ===================
# Redis configs
# ===================

redisEnable: true
redis:
  nameOverride: "redis"
  fullnameOverride: "redis"

  architecture: "standalone"
  global:
    redis:
      password: ""
  auth:
    enabled: false

# ===================
# Jupyter configs
# ===================

jupyterEnable: true
jupyter:
  nameOverride: "jupyter"
  fullnameOverride: "jupyter"

  jupyterToken: "YOUR_JUPYTER_PASSWORD_HERE"

  image:
    repository: "icr.io/quantum-public/quantum-serverless-notebook"
    tag: "0.2.1-py39"
    pullPolicy: IfNotPresent
  container:
    port: 8888
  service:
    port: 80

# ===================
# Kuberay Operator
# ===================

kuberayOperatorEnable: true
kuberay-operator:
  image:
    repository: kuberay/operator
    tag: v0.5.2
    pullPolicy: IfNotPresent

# ===================
# Keycloak 
# ===================

keycloakEnable: true
gatewayClientSecret: GATEWAYSECRET-CHANGEME
grafanaClientSecret: GRAFANASECRET-CHANGEME
keycloakUserID: user
keycloakUserPassword: password123
keycloak:
  nameOverride: "keycloak"
  fullnameOverride: "keycloak"

  logging:
    level: DEBUG
  service:
    type: ClusterIP
    ports:
      http: 31059
  auth:
    adminUser: admin
    adminPassword: passw0rd
  extraVolumes:
    - name: realm
      configMap:
        name: keycloakrealm
  extraVolumeMounts:
    - name: realm
      mountPath: /opt/bitnami/keycloak/data/import
  extraStartupArgs: "--import-realm"

  postgresql:
    nameOverride: "postgresql"
    fullnameOverride: "postgresql"
    primary:
      initdb:
        scripts:
          create_db.sh: |
            #!/bin/bash
            PGUSER=$POSTGRES_USER PGPASSWORD=$POSTGRES_PASSWORD createdb -w "repository_db"
            PGUSER=$POSTGRES_USER PGPASSWORD=$POSTGRES_PASSWORD createdb -w "gateway_db"

# ===================
# Quantum Repository
# ===================

repositoryEnable: true
repository:
  nameOverride: "repository"
  fullnameOverride: "repository"
  image:
    pullPolicy: IfNotPresent
    tag: "0.2.1"
  application:
    superuser:
      username: "admin"
      password: "passw0rd"
      email: "admin@examplemail.io"
  service:
    type: ClusterIP
    port: 8060
  database:
    name: repository_db

# ===================
# Prometheus
# ===================

prometheusEnable: false
kube-prometheus-stack:
  nameOverride: "prometheus"
  fullnameOverride: "prometheus"

  kube-state-metrics:
    nameOverride: "kube-state-metrics"
    fullnameOverride: "kube-state-metrics"

  prometheus-node-exporter:
    nameOverride: "prometheus-node-exporter"
    fullnameOverride: "prometheus-node-exporter"

  grafana:
    nameOverride: "grafana"
    fullnameOverride: "grafana"

    adminPassword: passw0rd

    # Keycloak Sign-on for Grafana console
    #
    # To enable sign-on by Keycloak for Grafana console
    # 1. replace <Non-Loopback local IP> with the local IP address
    # 2. change the keycloak service to NodePort type and add
    #    nodePorts
    #      http: 32059
    # 3. uncomment following lines
    #
    #service:
    #  type: NodePort
    #  nodePort: 32294
    #grafana.ini:
    #  auth:
    #    disable_login_form: "true"
    #  auth.generic_oauth:
    #    enabled: "true"
    #    name: Keycloak-OAuth
    #    allow_sign_up: "true"
    #    client_id: grafana-client
    #    client_secret: GRAFANASECRET-CHANGEME
    #    api_url: "http://<Non-Loopback local IP>:31059/realms/quantumserverless/protocol/openid-connect/userinfo"
    #    auth_url: "http://<Non-Loopback local IP>:31059/realms/quantumserverless/protocol/openid-connect/auth"
    #    token_url: "http://<Non-Loopback local IP>:31059/realms/quantumserverless/protocol/openid-connect/token"
    #    role_attribute_path: "contains(roles[*], 'grafana-admin') && 'GrafanaAdmin' || contains(roles[*], 'admin') && 'Admin' || contains(roles[*], 'editor') && 'Editor' || 'Viewer'"
    #    allow_assign_grafana_admin: "true"
    #    scopes: openid email profile roles
    #    email_attribute_path: user@quatunserverless.org
    #    login_attribute_path: user
    #    name_attribute_path: none
    #  log:
    #    level: debug
    #  server:
    #    root_url: "http://localhost:32294/"

# ===================
# loki
# ===================

lokiEnable: false
loki:
  nameOverride: "loki"
  fullnameOverride: "loki"

  loki:
    commonConfig:
      replication_factor: 1
    storage:
      type: "filesystem"
    auth_enabled: false
  write:
    replicas: 0
  read:
    replicas: 0
  backend:
    replicas: 0
  singleBinary:
    replicas: 1
  gateway:
    service:
      type: ClusterIP
  monitoring:
    selfMonitoring:
      enabled: false
      grafanaAgent:
        installOperator: false
  test:
    enabled: false

# ===================
# promtail
# ===================

promtailEnable: false
promtail:
  nameOverride: "promtail"
  fullnameOverride: "promtail"

# ===================
# COS
# ===================

cos:
  bucket: BUCKETNAME-CHANGEME
  endpoint: ENDPOINT-CHANGEME
  secretName: SECRETNAME-CHANGEME
  storageClassName: STORAGECLASSNAME-CHANGEME
  storageSize: 10Gi
